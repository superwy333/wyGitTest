<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc
    	http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.0.xsd">

    <!-- 静态资源映射 -->
    <mvc:resources mapping="/static/**" location="/static/" cache-period="31536000"/>
    <!-- 注册XmlViewResolver，用于iReport & JasperReports报表生成 -->
    <!--<bean id="jasperReportResolver" class="org.springframework.web.servlet.view.XmlViewResolver">
        <property name="order" value="0"></property>
        <property name="location" value="WEB-INF/jasper/jasper-defs.xml"></property>
    </bean>-->
    <!--<bean class="com.jeesuite.confcenter.spring.CCPropertyPlaceholderConfigurer">
        <property name="remoteEnabled" value="false"/>
        &lt;!&ndash; 本地配置文件 &ndash;&gt;
        <property name="locations">
            <list>
                <value>classpath:application.properties</value>
                <value>classpath:config.properties</value>
            </list>
        </property>
    </bean>-->

    <!--<bean id="jasperReportResolver" class="org.springframework.web.servlet.view.XmlViewResolver">
        <property name="order" value="0"></property>
        <property name="location" value="WEB-INF/jasper/jasper-defs.xml"></property>
    </bean>-->

    <!-- 支持对静态资源文件的访问 -->
    <mvc:default-servlet-handler/>

    <!-- 使用Annotation自动注册Bean,只扫描@Controller -->
    <context:component-scan base-package="cn.wy"
                            use-default-filters="false"><!-- base-package 如果多个，用“,”分隔 -->
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <mvc:annotation-driven content-negotiation-manager="contentNegotiationManager">
        <mvc:message-converters register-defaults="true">
            <!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8"/>
            </bean>
            <!-- 将Jackson2HttpMessageConverter的默认格式化输出设为true -->
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="prettyPrint" value="true"/>
                <property name="objectMapper">
                    <!--使用自定义的ObjectMapper, 如果需要配置额外的序列化与反序列化属性, 统一在自定义ObjectMapper中配置-->
                    <bean class="cn.wy.CustomJacksonObjectMapper"/>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!-- <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">  
                <property name="useDefaultSuffixPattern" />      
         </bean>  -->

    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                    <property name="writeAcceptCharset" value="false"/>
                    <property name="supportedMediaTypes">
                        <list>
                            <value>text/plain;charset=UTF-8</value>
                        </list>
                    </property>
                </bean>
                <bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter"/>
                <bean id="mappingJacksonHttpMessageConverter"
                      class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                    <property name="supportedMediaTypes">
                        <list>
                            <value>application/json;charset=UTF-8</value>
                        </list>
                    </property>
                </bean>
            </list>
        </property>
    </bean>

    <!-- REST中根据URL后缀自动判定Content-Type及相应的View -->
    <!-- 默认是json视图, 当后缀是xxx.xml时, 表示返回的是xml, 注意实体需要加上@XmlRootElement注解 -->
    <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <property name="ignoreAcceptHeader" value="true"/>
        <property name="defaultContentType" value="application/json"/>
        <property name="mediaTypes">
            <value>
                json=application/json
                xml=application/xml
            </value>
        </property>
    </bean>

    <!-- 定义JSP文件的位置 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".jsp"/>
        <!-- 解决https不能重定向的问题 -->
        <property name="redirectHttp10Compatible" value="false" />
    </bean>

    <!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 -->
    <!--<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8"/>
        &lt;!&ndash; 指定所上传文件的总大小不能超过200KB。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和&ndash;&gt;
        <property name="maxUploadSize" value="${maxUploadSize}"/>
    </bean>-->

    <!-- 解析器注册 -->
    <!--<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="stringHttpMessageConverter"/>
            </list>
        </property>
    </bean>
    &lt;!&ndash; String类型解析器，允许直接返回String类型的消息 &ndash;&gt;
    <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter"/>-->

    <!-- captcha一些属性的配置 -->
    <!--<bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
        <property name="config">
            <bean class="com.google.code.kaptcha.util.Config">
                <constructor-arg>
                    <props>
                        <prop key="kaptcha.border">no</prop>
                        <prop key="kaptcha.border.color">105,179,90</prop>
                        <prop key="kaptcha.textproducer.font.color">blue</prop>
                        <prop key="kaptcha.image.width">120</prop>
                        <prop key="kaptcha.image.height">37</prop>
                        <prop key="kaptcha.textproducer.char.string">${kaptcha.textproducer.char.string:1234567890}</prop>
                        <prop key="kaptcha.textproducer.font.size">30</prop>
                        <prop key="kaptcha.textproducer.char.length">${kaptcha.textproducer.char.length:4}</prop>
                        <prop key="kaptcha.textproducer.char.space">5</prop>
                        <prop key="kaptcha.textproducer.font.names">宋体,楷体,微软雅黑</prop>
                        <prop key="kaptcha.noise.impl">com.google.code.kaptcha.impl.NoNoise</prop>
                        <prop key="kaptcha.session.key">code</prop>
                    </props>
                </constructor-arg>
            </bean>
        </property>
    </bean>-->

    <!-- 异常统一处理
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
        	<props>
        		<prop key="java.lang.Throwable">error/403</prop>
        	</props>
        </property>
    </bean> -->

    <!-- 支持 Shiro对Controller的方法级AOP安全控制 begin -->
    <!-- 参考文档: http://chenyiheng.iteye.com/blog/2105499 , http://blog.csdn.net/axzywan/article/details/7774469 -->
    <!--
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
    	<property name="proxyTargetClass" value="true" />
    </bean>

    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager" />
    </bean> -->
    <!-- 支持shiro注解end -->


<!--    &lt;!&ndash; 定义国际化文件和编码 &ndash;&gt;
    <bean id="propertiesMessageSource"  class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="defaultEncoding" value="utf8" />
    </bean>

    &lt;!&ndash; 使用session判断用户语言 &ndash;&gt;
    <bean id="localeResolver"  class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
        <property name="defaultLocale" value="en"/>
    </bean>
    <mvc:interceptors>
        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
            <property name="paramName" value="locale"/>
        </bean>
    </mvc:interceptors>

    &lt;!&ndash; 数据库国际化资源 自定义的MessageResource &ndash;&gt;
    <bean id="messageSource" class="com.zynsun.platform.i18n.MessageResource">
        <property name="parentMessageSource" ref="propertiesMessageSource"/>
    </bean>-->
</beans>